<%- include('../partials/header', { title: 'Dashboard' }) %>

<button id="toggleSidebar" class="hamburger" style="margin-bottom: 20px">
  ☰
</button>

<div class="dashboard-container">
  <aside class="sidebar">
    <div class="logo-title">
        <% if (info?.logo_url) { %>
        <a href="/"><img src="<%= info.logo_url %>" alt="Logo" /></a>
        <% } %>
        <p><%= info?.company_name || 'C&S Church Online' %></p>
      </div>
    <div class="sidebar-header">
      <% if (profilePic) { %>
      <img src="<%= profilePic %>" alt="Profile Picture" class="profile-pic" />
      <% } else { %>
      <img
        src="/images/profile male.png"
        alt="Default Profile Picture"
        class="profile-pic"
      />
      <% } %>
    </div>
    <h2 style="font-size: 14px;">👤 <%= student.fullname %></h2>

    <!-- <ul>
      <li>
        <button class="nav-tab" data-section="dashboard">🏠 Dashboard</button>
      </li>
      <li>
        <button class="nav-tab" data-section="courses">📚 My Courses</button>
      </li>
      <li>
        <button class="nav-tab" data-section="progress">📈 Progress</button>
      </li>
      <li><button class="nav-tab" data-section="badges">🎖️ Badges</button></li>
      <li><a href="/admin/logout">🚪 Logout</a></li>
    </ul> -->
    <ul class="sidebar-nav">
      <li><a href="/student/dashboard">🏠 Dashboard</a></li>

      <!-- Profile -->
      <!-- <li><a href="/student/profile">👤 My Profile</a></li> -->
       <li><a href="/student/dashboard?section=profile">👤 My Profile</a></li>
       <p style="color: rgb(255, 255, 255);">💰 Wallet: ₦<%= walletBalance.toLocaleString() %></p>

      <!-- Pathways / Courses -->
      <li>
        <button class="dropdown-btn">📂 My Pathways ▾</button>
        
        <ul class="dropdown-container">
          <% Object.keys(pathwayCourses).forEach(pathway => { %>
          <li>
            <a
              href="/student/dashboard?pathway=<%= encodeURIComponent(pathway) %>"
            >
              <%= pathway %>
            </a>
          </li>
          <% }) %>
        </ul>
      </li>

      <li><a href="/admin/logout">🚪 Logout</a></li>
    </ul>
  </aside>

 <main class="main-content">
  <% if (section === 'profile') { %>
    <!-- 👤 PROFILE SECTION -->
    <div class="profile-container">
      <h2>👤 My Profile</h2>

      <div class="profile-card">
        <img src="<%= profilePic || '/images/profile male.png' %>" class="profile-pic-large" />
        <p><strong>Full Name:</strong> <%= student.fullname %></p>
        <p><strong>Gender:</strong> <%= student.gender %></p>
        <p><strong>Date of Birth:</strong> <%= student.dob ? student.dob.toISOString().split('T')[0] : 'N/A' %></p>
        <p style="color: rgb(0, 0, 0);">💰 Wallet: ₦<%= walletBalance.toLocaleString() %></p>
        <button class="btn-create" onclick="openEditModal('profile')">✏️ Edit Profile</button>
      </div>

      <!-- EDIT MODAL -->
      <div id="editModal-profile" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeEditModal('profile')">&times;</span>
          <h3>Edit My Profile</h3>
          <form action="/student/profile/edit" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="existingPic" value="<%= profilePic %>" />
            
            <label>Full Name</label>
            <input type="text" name="fullname" value="<%= student.fullname %>" required />

            <label>Gender</label>
            <select name="gender" required>
              <option value="Male" <%= student.gender === 'Male' ? 'selected' : '' %>>Male</option>
              <option value="Female" <%= student.gender === 'Female' ? 'selected' : '' %>>Female</option>
            </select>

            <label>Date of Birth</label>
            <input type="date" name="dob" value="<%= student.dob ? student.dob.toISOString().split('T')[0] : '' %>" required />

            <label>Profile Picture</label>
            <input type="file" name="profilePic" />

            <button type="submit">Save Changes</button>
          </form>
        </div>
      </div>
    </div>

  <% } else if (section === 'module' && moduleInfo) { %>
  <!-- LEARNING VIEW -->
  <div class="learning-container">
    <!-- Mini Sidebar -->
    
<aside class="lesson-sidebar">
  <h3>All Modules</h3>
  <% Object.keys(courseModules).forEach(courseId => { %>
    <% courseModules[courseId].forEach(module => { %>
      <div class="module-block">
        <button class="module-toggle no-bg" onclick="toggleModule(<%= module.id %>)">
          📦 <%= module.title %> ▾
        </button>
        <ul id="module-<%= module.id %>" class="lesson-list" style="display:none;">
          <% (moduleLessons[module.id] || []).forEach(lesson => { %>
            <li>
              <button class="lesson-toggle no-bg" onclick="toggleLessonMenu(<%= lesson.id %>)">
                📚 <%= lesson.title %> ▾
              </button>
              <ul id="lesson-menu-<%= lesson.id %>" style="display:none; padding-left:15px;">
                <% /* Video */ %>
                <li><button class="no-bg" onclick="loadLessonPart(<%= lesson.id %>, 'video')">🎥 Video</button></li>
                <% /* Lesson Note */ %>
                <li><button class="no-bg" onclick="loadLessonPart(<%= lesson.id %>, 'content')">📝 Lesson Note</button></li>
                <% /* Quiz */ %>
                <li><button class="no-bg" onclick="loadLessonPart(<%= lesson.id %>, 'quiz')">📝 Quiz</button></li>
              </ul>
            </li>
          <% }) %>
        </ul>
      </div>
    <% }) %>
  <% }) %>
</aside>




    <!-- Lesson Content Area -->

    <!-- <div class="lesson-main-area" id="lessonMainArea">
      <p>Select a lesson to start learning.</p>
    </div> -->

 <div class="lesson-main-area" id="lessonMainArea">
  <p>Select a lesson to start learning.</p>
</div>

<!-- AI Tutor Widget (keep it outside lessonMainArea so it stays visible) -->
<!-- <div id="ai-tutor" class="ai-tutor" style="display:none;">
  <div class="ai-tutor-header">🤖 AI Tutor</div>
  <div id="ai-messages" class="ai-messages"></div>
  <div class="ai-input-row">
    <input id="ai-question" type="text" placeholder="Ask about your lesson…" />
    <button id="ai-send">Send</button>
  </div>
</div> -->

<div id="ai-tutor" class="ai-tutor" style="display:none;">
  <div class="ai-tutor-header">
    🤖 AI Tutor 
    <button id="ai-toggle" class="ai-toggle">–</button>
  </div>
  <div id="ai-messages" class="ai-messages"></div>
  <div class="ai-input-row">
    <input id="ai-question" type="text" placeholder="Ask about your lesson…" />
    <button id="ai-send">Send</button>
  </div>
</div>




    <!-- Quiz Results Overlay -->
    <div id="quizResultsOverlay" style="display:none;">
      <div class="overlay-content">
        <h2>Your Quiz Results</h2>
        <p id="quizScore"></p>
        <p id="quizMessage"></p>
        <button onclick="reviewQuiz()">🔍 Review Quiz</button>
        <button onclick="goToNextLesson()">➡ Next Lesson</button>
        <button onclick="closeResults()">❌ Close</button>
      </div>
    </div>
  </div>

  <% } else if (!selectedPathway || !pathwayCourses[selectedPathway]) { %>
    <!-- DASHBOARD VIEW -->
    <section class="stats-boxes">
      <div class="stat-box light-blue">
        <h4>📘 Courses Completed</h4>
        <p><%= completedCourses %></p>
      </div>
      <div class="stat-box light-pink">
        <h4>🗂️ Completed Projects</h4>
        <p><%= completedProjects %></p>
      </div>
      <div class="stat-box light-yellow">
        <h4>🏅 Badges Earned</h4>
        <p><%= badges.length %></p>
      </div>
      <div class="stat-box light-grey">
        <h4>📜 Certificates</h4>
        <p><%= certificatesCount %></p>
      </div>
    </section>

    <div class="analytics-wrapper">
      <div class="analytics-filters">
        <select>
          <option selected>This Week</option>
        </select>
      </div>
      <canvas id="engagementChart"></canvas>
    </div>

    <div class="chart-section">
      <h3>📊 Course Completion Progress</h3>
      <canvas id="courseProgressChart"></canvas>
    </div>

    <h2>Continue Learning</h2>
    <div class="course-grid">
      <% enrolledCourses.forEach(course => { %>
      <div class="course-card3">
        <img src="<%= course.thumbnail_url %>" alt="" />
        <div>
          <h4><%= course.title %></h4>
          <p><%= course.progress %>% complete</p>
          <div class="progress-bar">
            <div class="filled" style="width: <%= course.progress %>%"></div>
          </div>
        </div>
      </div>
      <% }) %>
    </div>

  <% } else { %>
    <!-- PATHWAY VIEW -->
    <section class="pathway-section">
      <h2><%= selectedPathway %> Courses</h2>

      <% pathwayCourses[selectedPathway].forEach(course => { %>
      <div class="course-section">
        <h3><%= course.title %></h3>

      <div class="modules-scroll">
  <% (courseModules[course.id] || []).forEach(mod => { %>
    <div class="module-card">
      <img
        style="width: 100%; height: 100px; object-fit: contain"
        src="<%= mod.thumbnail || '/images/JKT logo bg.png' %>"
        alt=""
      />
      <h4 style="font-size: 12px;"><%= mod.title %></h4>
      <p><%= lessonCounts[mod.id] || 0 %> Lessons</p>
       <a href="/student/dashboard?section=module&moduleId=<%= mod.id %>">View Module</a>

      
    </div>
  <% }) %>
</div>


      <% }) %>
    </section>
  <% } %>

  <!-- AI Tutor Widget -->
<!-- <div id="ai-tutor" class="ai-tutor">
  <div class="ai-tutor-header">🤖 AI Tutor</div>
  <div id="ai-messages" class="ai-messages"></div>
  <div class="ai-input-row">
    <input id="ai-question" type="text" placeholder="Ask about your lesson…" />
    <select id="ai-lesson">
      <option value="">(Optional) Link to current lesson</option>
      <% if (lessons) { lessons.forEach(lsn => { %>
        <option value="<%= lsn.id %>"><%= lsn.title %></option>
      <% }) } %>
    </select>
    <button id="ai-send">Send</button>
  </div>
</div> -->

<style>
  .ai-tutor{position:fixed; right:24px; bottom:24px; width:380px; max-width:90vw; background:#fff; border:1px solid #eee; border-radius:12px; box-shadow:0 10px 30px rgba(0,0,0,.08); display:flex; flex-direction:column; overflow:hidden; z-index:9999}
  .ai-tutor-header{background:#111827; color:#fff; padding:10px 14px; font-weight:600}
  .ai-messages{height:260px; overflow:auto; padding:12px; display:flex; gap:10px; flex-direction:column}
  .ai-msg{padding:10px 12px; border-radius:10px; max-width:85%}
  .ai-msg.user{align-self:flex-end; background:#e5f0ff}
  .ai-msg.bot{align-self:flex-start; background:#f6f6f6}
  .ai-input-row{display:flex; gap:6px; padding:10px; border-top:1px solid #eee}
  .ai-input-row input, .ai-input-row select{flex:1; padding:8px 10px}
  .ai-input-row button{padding:8px 12px; border:none; background:#2563eb; color:#fff; border-radius:8px; cursor:pointer}
</style>

<script>
  const sendBtn = document.getElementById('ai-send');
  const input = document.getElementById('ai-question');
  const lessonSel = document.getElementById('ai-lesson');
  const box = document.getElementById('ai-messages');

  function pushMsg(text, who) {
    const el = document.createElement('div');
    el.className = 'ai-msg ' + (who || 'bot');
    el.textContent = text;
    box.appendChild(el);
    box.scrollTop = box.scrollHeight;
  }

  async function ask() {
    const q = input.value.trim();
    if (!q) return;
    const lessonId = lessonSel.value || "";
    input.value = '';
    pushMsg(q, 'user');

    try {
      const res = await fetch('/student/ai/ask', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ question: q, lessonId })
      });
      const data = await res.json();
      pushMsg(data.answer || 'No answer yet.', 'bot');
    } catch (e) {
      pushMsg('Sorry, the tutor is unavailable right now.', 'bot');
    }
  }

  sendBtn.addEventListener('click', ask);
  input.addEventListener('keydown', (e)=>{ if(e.key==='Enter') ask(); });
</script>

</main>

</div>

<!-- <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Script for engagement char -->
<script>
  const ctx = document.getElementById('engagementChart').getContext('2d');
  const chart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: <%- JSON.stringify(engagementData.labels) %>,
      datasets: [{
        label: 'Lessons Completed',
        data: <%- JSON.stringify(engagementData.data) %>,
        borderColor: '#2196f3',
        fill: false,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: { beginAtZero: true }
      }
    }
  });
</script>

<!-- Script for course progress chart -->
<script>
  const ctx2 = document.getElementById('courseProgressChart').getContext('2d');
  const courseProgressChart = new Chart(ctx2, {
    type: 'bar',
    data: {
      labels: <%- JSON.stringify(enrolledCourses.map(c => c.title)) %>,
      datasets: [{
        label: 'Progress (%)',
        data: <%- JSON.stringify(enrolledCourses.map(c => c.progress)) %>,
        backgroundColor: [
          '#4CAF50',
          '#2196F3',
          '#FFC107',
          '#FF5722',
          '#9C27B0',
          '#3F51B5',
          '#E91E63',
          '#00BCD4',
          '#8BC34A',
          '#FF9800'
        ],
        borderRadius: 4
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          title: {
            display: true,
            text: 'Completion (%)'
          }
        }
      },
      plugins: {
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: function(context) {
              return `${context.parsed.y}% completed`;
            }
          }
        }
      }
    }
  });
</script>

<!-- Script for sidebar -->
<script>
  document.querySelectorAll(".dropdown-btn").forEach((btn) => {
    btn.addEventListener("click", function () {
      this.classList.toggle("active");
      const dropdown = this.nextElementSibling;
      dropdown.style.display =
        dropdown.style.display === "block" ? "none" : "block";
    });
  });

  document.querySelectorAll(".sub-dropdown-btn").forEach((btn) => {
    btn.addEventListener("click", function () {
      this.classList.toggle("active");
      const sub = this.nextElementSibling;
      sub.style.display = sub.style.display === "block" ? "none" : "block";
    });
  });
</script>

<!-- script to Highlight active navbar -->
<script>
  const tabs = document.querySelectorAll(".nav-tab");
  tabs.forEach((tab) => {
    if (tab.href === window.location.href) {
      tab.classList.add("active");
    }
  });
  document
    .getElementById("toggleSidebar")
    .addEventListener("click", function () {
      document.querySelector(".sidebar").classList.toggle("open");
    });
</script>

<!-- script for edit modal -->
 <script>
  function openEditModal(id) {
    document.getElementById("editModal-" + id).style.display = "block";
  }

  function closeEditModal(id) {
    document.getElementById("editModal-" + id).style.display = "none";
  }
</script>

<!-- Lesson and quiz script -->
 
<!-- <script>
document.addEventListener("DOMContentLoaded", () => {
  const sendBtn = document.getElementById("ai-send");
  const input = document.getElementById("ai-question");
  const messages = document.getElementById("ai-messages");

  // helper: render message
  function pushMsg(text, who = "user") {
    const msg = document.createElement("div");
    msg.className = "msg " + who;
    msg.innerText = text;
    messages.appendChild(msg);
    messages.scrollTop = messages.scrollHeight;
  }

  // handle sending
  async function sendQuestion(q) {
    if (!q.trim()) return;

    pushMsg(q, "user"); // show immediately
    input.value = "";

    try {
      const res = await fetch("/student/ai/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          question: q,
          lessonId: window.currentLessonId || null
        })
      });
      const data = await res.json();
      if (data.ok) {
        pushMsg(data.answer, "bot");
      } else {
        pushMsg("⚠️ Tutor is unavailable.", "bot");
      }
    } catch (err) {
      console.error("AI send error:", err);
      pushMsg("❌ Error contacting tutor.", "bot");
    }
  }

  // click send
  sendBtn.addEventListener("click", () => {
    sendQuestion(input.value);
  });

  // press Enter
  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      sendQuestion(input.value);
    }
  });

  // ✅ Suggested questions buttons
  const suggRow = document.createElement("div");
  suggRow.className = "ai-suggestions";
  document.querySelector("#ai-tutor .ai-input-row").before(suggRow);

  window.showLessonSuggestions = function (suggestions = []) {
    suggRow.innerHTML = ""; // clear old
    suggestions.forEach((s) => {
      const btn = document.createElement("button");
      btn.className = "sugg-btn";
      btn.innerText = s;
      btn.onclick = () => sendQuestion(s);
      suggRow.appendChild(btn);
    });
  };
});

document.addEventListener("DOMContentLoaded", () => {
  const aiTutor = document.getElementById("ai-tutor");
  const aiMessages = document.getElementById("ai-messages");
  const toggleBtn = document.getElementById("ai-toggle");

  toggleBtn.addEventListener("click", () => {
    if (aiTutor.classList.contains("collapsed")) {
      // expand
      aiTutor.classList.remove("collapsed");
      aiMessages.style.display = "block";
      document.querySelector("#ai-tutor .ai-input-row").style.display = "flex";
      toggleBtn.textContent = "–";
    } else {
      // collapse
      aiTutor.classList.add("collapsed");
      aiMessages.style.display = "none";
      document.querySelector("#ai-tutor .ai-input-row").style.display = "none";
      toggleBtn.textContent = "+";
    }
  });
});

</script> -->

<script>
document.addEventListener("DOMContentLoaded", () => {
  const sendBtn = document.getElementById("ai-send");
  const input = document.getElementById("ai-question");
  const messages = document.getElementById("ai-messages");

  // helper: render message (✅ allow HTML so answers can be styled)
  function pushMsg(text, who = "user") {
    const msg = document.createElement("div");
    msg.className = "msg " + who;
    msg.innerHTML = text; // ✅ allow headings, lists, code
    messages.appendChild(msg);
    messages.scrollTop = messages.scrollHeight;
  }

  // handle sending
  async function sendQuestion(q) {
    if (!q.trim()) return;

    pushMsg(`<p>${q}</p>`, "user"); // show immediately
    input.value = "";

    try {
      const res = await fetch("/student/ai/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          question: q,
          lessonId: window.currentLessonId || null
        })
      });
      const data = await res.json();
      if (data.ok) {
        pushMsg(data.answer, "bot");
      } else {
        pushMsg("<em>⚠️ Tutor is unavailable.</em>", "bot");
      }
    } catch (err) {
      console.error("AI send error:", err);
      pushMsg("<em>❌ Error contacting tutor.</em>", "bot");
    }
  }

  // click send
  sendBtn.addEventListener("click", () => sendQuestion(input.value));

  // press Enter
  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      sendQuestion(input.value);
    }
  });

  // ✅ Suggested questions buttons
  const suggRow = document.createElement("div");
  suggRow.className = "ai-suggestions";
  document.querySelector("#ai-tutor .ai-input-row").before(suggRow);

  window.showLessonSuggestions = function (suggestions = []) {
    suggRow.innerHTML = ""; // clear old
    suggestions.forEach((s) => {
      const btn = document.createElement("button");
      btn.className = "sugg-btn";
      btn.innerText = s;
      btn.onclick = () => sendQuestion(s);
      suggRow.appendChild(btn);
    });
  };

  // ✅ Collapse/expand chatbox
  const aiTutor = document.getElementById("ai-tutor");
  const aiMessages = document.getElementById("ai-messages");
  const toggleBtn = document.getElementById("ai-toggle");

  toggleBtn.addEventListener("click", () => {
    if (aiTutor.classList.contains("collapsed")) {
      aiTutor.classList.remove("collapsed");
      aiMessages.style.display = "block";
      document.querySelector("#ai-tutor .ai-input-row").style.display = "flex";
      suggRow.style.display = "flex";
      toggleBtn.textContent = "–";
    } else {
      aiTutor.classList.add("collapsed");
      aiMessages.style.display = "none";
      document.querySelector("#ai-tutor .ai-input-row").style.display = "none";
      suggRow.style.display = "none";
      toggleBtn.textContent = "+";
    }
  });
});
</script>


<script>
function toggleModule(moduleId) {
  const el = document.getElementById(`module-${moduleId}`);
  el.style.display = (el.style.display === "none" || !el.style.display) ? "block" : "none";
}

function toggleLessonMenu(lessonId) {
  const el = document.getElementById(`lesson-menu-${lessonId}`);
  el.style.display = (el.style.display === "none" || !el.style.display) ? "block" : "none";
}

// function loadLessonPart(lessonId, part) {
//   fetch(`/student/lessons/${lessonId}`)
//     .then(res => res.json())
//     .then(lesson => {
//       let html = `<h2>${lesson.title}</h2>`;

//       if (part === 'video' && lesson.video_url) {
//         html += `<div class="lesson-video"><iframe src="${lesson.video_url}" frameborder="0" allowfullscreen></iframe></div>`;
//       }

//       if (part === 'content') {
//         // Wrap content in a div and add a style to make images responsive
//         html += `<div class="lesson-text" style="overflow:auto;">${lesson.content || '<p>No content available.</p>'}</div>
//         <style>
//           .lesson-text img {
//             max-width: 100%;
//             height: auto;
//             display: block;
//             margin: 10px 0;
//           }
//         </style>`;
//       }

//       if (part === 'quiz') {
//         loadQuizInMain(lessonId);
//         return;
//       }

//       document.getElementById("lessonMainArea").innerHTML = html;
//     });
// }

// function loadLessonPart(lessonId, part) {
//   fetch(`/student/lessons/${lessonId}`)
//     .then(res => res.json())
//     .then(lesson => {
//       let html = `<h2>${lesson.title}</h2>`;

//       if (part === 'video' && lesson.video_url) {
//         html += `<div class="lesson-video"><iframe src="${lesson.video_url}" frameborder="0" allowfullscreen></iframe></div>`;
//       }

//       if (part === 'content') {
//         html += `<div class="lesson-text">${lesson.content || '<p>No content available.</p>'}</div>`;
//         document.getElementById("ai-tutor").style.display = "flex"; // ✅ show AI tutor
//       } else {
//         document.getElementById("ai-tutor").style.display = "none"; // hide elsewhere
//       }

//       if (part === 'quiz') {
//         loadQuizInMain(lessonId);
//         return;
//       }

//       document.getElementById("lessonMainArea").innerHTML = html;
//     });
// }

function loadLessonPart(lessonId, part) {
  fetch(`/student/lessons/${lessonId}`)
    .then(res => res.json())
    .then(lesson => {
      window.currentLessonId = lessonId; // ✅ keep track

      let html = `<h2>${lesson.title}</h2>`;

      if (part === "video" && lesson.video_url) {
        html += `<div class="lesson-video"><iframe src="${lesson.video_url}" frameborder="0" allowfullscreen></iframe></div>`;
      }

      if (part === "content") {
        html += `<div class="lesson-text">${lesson.content || "<p>No content available.</p>"}</div>`;
        document.getElementById("ai-tutor").style.display = "flex";

        // ✅ Generate 2–3 suggested Qs
        const suggestions = [
          `Summarize this lesson in simple terms.`,
          `What is the key concept in "${lesson.title}"?`,
          `Can you give me an example based on this lesson?`
        ];
        if (window.showLessonSuggestions) {
          window.showLessonSuggestions(suggestions);
        }

      } else {
        document.getElementById("ai-tutor").style.display = "none";
      }

      if (part === "quiz") {
        loadQuizInMain(lessonId);
        return;
      }

      document.getElementById("lessonMainArea").innerHTML = html;
    });
}


function loadQuizInMain(lessonId) {
  fetch(`/student/lessons/${lessonId}/quiz`)
    .then(res => res.json())
    .then(data => {
      let html = `<h2>Lesson Quiz</h2>`;
      if (!data.success) {
        html += `<p>No quiz for this lesson.</p>`;
      } else {
        html += `<form onsubmit="submitQuizInline(event, ${lessonId})">`;
        data.questions.forEach((q, idx) => {
          html += `<p><strong>Q${idx+1}:</strong> ${q.question}</p>`;
          q.options.forEach(opt => {
            html += `<label><input type="radio" name="q${q.id}" value="${opt}" required> ${opt}</label><br>`;
          });
        });
        html += `<button type="submit">Submit Quiz</button></form>`;
      }
      document.getElementById("lessonMainArea").innerHTML = html;
    });
}

// function submitQuizMain(e, lessonId) {
//   e.preventDefault();
//   const formData = new FormData(e.target);
//   fetch(`/student/lessons/${lessonId}/quiz/submit`, { method: "POST", body: formData })
//     .then(res => res.json())
//     .then(result => {
//       let html = `<h3>Your Score: ${result.score}%</h3>`;
//       html += `<p>${result.passed ? '✅ Passed' : '❌ Failed'}</p>`;
//       html += `<button onclick="reviewQuizMain()">Review Quiz</button>`;
//       if (result.passed && result.nextLessonId) {
//         html += `<button onclick="loadLessonPart(${result.nextLessonId}, 'video')">Next Lesson</button>`;
//       }
//       document.getElementById("lessonMainArea").innerHTML = html;
//       window.quizReviewData = result.reviewData;
//     });
// }

// function submitQuizInline(e, lessonId) {
//   e.preventDefault();

//   const formData = new FormData(e.target);
//   const answers = {};
//   for (let [key, value] of formData.entries()) {
//     answers[key] = value;
//   }

//   fetch(`/student/lessons/${lessonId}/quiz/submit`, {
//     method: "POST",
//     headers: { "Content-Type": "application/json" },
//     body: JSON.stringify(answers)
//   })
//   .then(res => res.json())
//   .then(result => {
//     if (!result.success) {
//       alert("Quiz submission failed.");
//       return;
//     }

//     const quizContainer = document.getElementById(`quiz-area-${lessonId}`);
//     quizContainer.innerHTML = `
//       <h4>Your Score: ${result.score}%</h4>
//       <p>${result.passed ? "✅ Passed" : "❌ Failed"}</p>
//       <button onclick="reviewQuizInline(${lessonId})">Review Quiz</button>
//       <div class="ai-feedback"><strong>🤖 AI Feedback:</strong> ${result.feedback}</div>
//     `;

//     // Save review data for reviewQuizInline
//     window.quizReviewData = result.reviewData;
//     window.currentReviewLesson = lessonId;

//     // Also push the AI summary into chatbox
//     pushMsg("AI Quiz Feedback: " + result.feedback, "bot");
//   })
//   .catch(err => {
//     console.error("❌ Error submitting quiz:", err);
//     alert("Error submitting quiz. Please try again.");
//   });
// }





</script>


<script>
function toggleModule(moduleId) {
  const el = document.getElementById(`module-${moduleId}`);
  el.style.display = (el.style.display === "none" || !el.style.display) ? "block" : "none";
}

function toggleLesson(lessonId) {
  const el = document.getElementById(`lesson-expand-${lessonId}`);
  if (el.style.display === "block") {
    el.style.display = "none";
    return;
  }
  // Load lesson details
  fetch(`/student/lessons/${lessonId}`)
    .then(res => res.json())
    .then(lesson => {
      let html = "";
      if (lesson.video_url) {
        html += `<div class="lesson-video">
          <iframe src="${lesson.video_url}" frameborder="0" allowfullscreen></iframe>
        </div>`;
      }
      html += `<div class="lesson-text">${lesson.content || '<p>No content available.</p>'}</div>`;
      if (lesson.has_quiz) {
        html += `<button class="btn-quiz" onclick="loadQuizInline(${lesson.id})">Take Quiz</button>
                 <div id="quiz-area-${lesson.id}" class="quiz-inline"></div>`;
      }
      el.innerHTML = html;
      el.style.display = "block";
    });
}

// function loadQuizInline(lessonId) {
//   fetch(`/student/lessons/${lessonId}/quiz`)
//     .then(res => res.json())
//     .then(data => {
//       const quizContainer = document.getElementById(`quiz-area-${lessonId}`);
//       if (!data.success) {
//         quizContainer.innerHTML = "<p>No quiz for this lesson.</p>";
//         return;
//       }
//       let quizHTML = `<form onsubmit="submitQuizInline(event, ${lessonId})">`;
//       data.questions.forEach((q, idx) => {
//         quizHTML += `<p><strong>Q${idx+1}:</strong> ${q.question}</p>`;
//         let options = q.options;
//         // If options is a string, split by comma
//         if (typeof options === "string") {
//           options = options.split(",").map(opt => opt.trim());
//         }
//         if (!Array.isArray(options)) options = [];
//         options.forEach(opt => {
//           quizHTML += `<label><input type="radio" name="q${q.id}" value="${opt}" required> ${opt}</label><br>`;
//         });
//       });
//       quizHTML += `<button type="submit">Submit Quiz</button></form>`;
//       quizContainer.innerHTML = quizHTML;
//     });
// }

function loadQuizInline(lessonId) {
  fetch(`/student/lessons/${lessonId}/quiz`)
    .then(res => res.json())
    .then(data => {
      if (!data.success) {
        document.getElementById("lessonMainArea").innerHTML = "<p>No quiz available.</p>";
        return;
      }

      let quizHTML = `<form onsubmit="submitQuizInline(event, ${lessonId})">`;

      data.questions.forEach((q, i) => {
        quizHTML += `
          <div class="quiz-question">
            <p><strong>Q${i + 1}:</strong> ${q.question}</p>
            ${q.options.map(opt => `
              <label>
                <input type="radio" name="q${q.id}" value="${opt}"> ${opt}
              </label><br>
            `).join("")}
          </div>
        `;
      });

      quizHTML += `<button type="submit">Submit Quiz</button></form>`;
      document.getElementById("lessonMainArea").innerHTML = `<div id="quiz-area-${lessonId}">${quizHTML}</div>`;
    });
}


// function submitQuizInline(e, lessonId) {
//   e.preventDefault(); // stop normal form submission (avoids dashboard redirect)

//   const formData = new FormData(e.target);
//   const answers = {};
//   for (let [key, value] of formData.entries()) {
//     answers[key] = value;
//   }

//   fetch(`/student/lessons/${lessonId}/quiz/submit`, {
//     method: "POST",
//     headers: { "Content-Type": "application/json" },
//     body: JSON.stringify(answers)
//   })
//     .then(res => res.json())
//     .then(result => {
//       const quizContainer = document.getElementById(`quiz-area-${lessonId}`) || document.getElementById("lessonMainArea");

//       if (!result.success) {
//         quizContainer.innerHTML = `<p class="error">Quiz submission failed. ${result.message || ""}</p>`;
//         return;
//       }

//       // Replace the quiz area with the results
//       quizContainer.innerHTML = `
//         <h3>Quiz Results</h3>
//         <p><strong>Score:</strong> ${result.score}%</p>
//         <p><strong>Status:</strong> ${result.passed ? "✅ Passed" : "❌ Failed"}</p>
//         <div class="ai-feedback"><strong>🤖 AI Feedback:</strong> ${result.feedback}</div>
//         <button onclick="reviewQuizInline(${lessonId})">Review Quiz</button>
//         <button onclick="toggleLesson(${lessonId})">⬅ Back to Lesson</button>
//       `;

//       // Save review data so reviewQuizInline can access it
//       window.quizReviewData = result.reviewData;
//       window.currentReviewLesson = lessonId;

//       // Push AI summary feedback into chatbox too
//       if (result.feedback) {
//         pushMsg("AI Quiz Feedback: " + result.feedback, "bot");
//       }
//     })
//     .catch(err => {
//       console.error("❌ Error submitting quiz:", err);
//       const quizContainer = document.getElementById(`quiz-area-${lessonId}`) || document.getElementById("lessonMainArea");
//       quizContainer.innerHTML = `<p class="error">Error submitting quiz. Please try again.</p>`;
//     });
// }

function submitQuizInline(e, lessonId) {
  e.preventDefault(); // stop normal form submission (avoids dashboard redirect)

  const formData = new FormData(e.target);
  const answers = {};
  for (let [key, value] of formData.entries()) {
    answers[key] = value;
  }

  fetch(`/student/lessons/${lessonId}/quiz/submit`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(answers)
  })
    .then(res => res.json())
    .then(result => {
      const quizContainer =
        document.getElementById(`quiz-area-${lessonId}`) ||
        document.getElementById("lessonMainArea");

      if (!result.success) {
        quizContainer.innerHTML = `<p class="error">Quiz submission failed. ${
          result.message || ""
        }</p>`;
        return;
      }

      // Save review data globally so reviewQuizInline can access
      window.quizReviewData = result.reviewData;
      window.currentReviewLesson = lessonId;

      // Show quick summary first
      quizContainer.innerHTML = `
        <h3>Quiz Results</h3>
        <p><strong>Score:</strong> ${result.score}%</p>
        <p><strong>Status:</strong> ${
          result.passed ? "✅ Passed" : "❌ Failed"
        }</p>
        <div class="ai-feedback"><strong>🤖 AI Feedback Summary:</strong> ${
          result.feedback
        }</div>
        <hr>
        <h3>Detailed Review</h3>
        <div id="quiz-review-${lessonId}"></div>
        <button onclick="toggleLesson(${lessonId})">⬅ Back to Lesson</button>
      `;

      // Immediately render detailed review below summary
      reviewQuizInline(lessonId);

      // Push AI summary feedback into chatbox too
      if (result.feedback) {
        pushMsg("AI Quiz Feedback: " + result.feedback, "bot");
      }
    })
    .catch(err => {
      console.error("❌ Error submitting quiz:", err);
      const quizContainer =
        document.getElementById(`quiz-area-${lessonId}`) ||
        document.getElementById("lessonMainArea");
      quizContainer.innerHTML = `<p class="error">Error submitting quiz. Please try again.</p>`;
    });
}

function reviewQuizInline(lessonId) {
  if (!window.quizReviewData || window.quizReviewData.length === 0) {
    alert("No review data available.");
    return;
  }

  let reviewHTML = "";
  window.quizReviewData.forEach((q, idx) => {
    reviewHTML += `
      <div class="review-question">
        <p><strong>Q${idx + 1}:</strong> ${q.question}</p>
        <p><strong>Your Answer:</strong> ${q.yourAnswer || "No answer"}</p>
        <p><strong>Correct Answer:</strong> ${q.correctAnswer}</p>
        <p class="${q.isCorrect ? "correct" : "wrong"}">
          ${q.isCorrect ? "✅ Correct" : "❌ Wrong"}
        </p>
        <div class="ai-feedback">
          <em>AI Feedback:</em> ${q.feedback || "No feedback"}
        </div>
      </div>
      <button onclick="toggleLesson(${lessonId})">⬅ Back to Lesson</button>
      <hr>
    `;
  });

  // Put review into the review area inside the results
  const container = document.getElementById(`quiz-review-${lessonId}`);
  if (container) {
    container.innerHTML = reviewHTML;
  } else {
    console.error(
      "❌ reviewQuizInline: No container found for lesson " + lessonId
    );
  }
}


function reviewQuizInline(lessonId) {
  if (!window.quizReviewData || window.quizReviewData.length === 0) {
    alert("No review data available.");
    return;
  }

  let reviewHTML = "<h3>Quiz Review</h3>";
  window.quizReviewData.forEach((q, idx) => {
    reviewHTML += `
      <div class="review-question">
        <p><strong>Q${idx + 1}:</strong> ${q.question}</p>
        <p>Your Answer: ${q.yourAnswer || "No answer"}</p>
        <p>Correct Answer: ${q.correctAnswer}</p>
        <p class="${q.isCorrect ? "correct" : "wrong"}">
          ${q.isCorrect ? "✅ Correct" : "❌ Wrong"}
        </p>
        <p><em>AI Feedback:</em> ${q.feedback || "No feedback"}</p>
      </div>
      <hr>
    `;
  });

  // ✅ Use fallback if quiz-area not found
  const container = document.getElementById(`quiz-area-${lessonId}`) || document.getElementById("lessonMainArea");

  if (container) {
    container.innerHTML = reviewHTML;
  } else {
    console.error("❌ reviewQuizInline: No container found for lesson " + lessonId);
  }
}


</script>
